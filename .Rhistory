getwd
getwd()
## create correlated dataset
N <- 150; P <- 50
X <- matrix(NA, nrow=N, ncol=P)
# covariance matrix
covmat <- matrix(rnorm(P^2,sd=2), nrow=P); covmat <- covmat+t(covmat)
U <- eigen(covmat)$vectors; D <- diag(rexp(P,rate=10))
covmat <- U%*%D%*%t(U)
covmat
betas.true <- c(1,2,3,4,5,-1,-2,-3,-4,-5,rep(0,P-10))
betas.true
## true betas
# v11-v50 are not : 계수가 0에 가까움 => 마지막 10개의 계수들 0으로 설정
betas.true <- c(1,2,3,4,5,-1,-2,-3,-4,-5,rep(0,P-10))
length(betas.true)
## true betas
# v11-v50 are not : 계수가 0에 가까움 => 마지막 10개의 계수들 0으로 설정
betas.true <- c(1,2,3,4,5,-1,-2,-3,-4,-5,rep(0,P-10))
betas.true
#install.packages('mvtnorm')
library(mvtnorm)
for(i in 1:N){ X[i,] <- rmvnorm(1, mean=rep(0,P), sigma=covmat) }
X <- data.frame(X)
head(X)
dim(X)
## splitting into "train" and "test" data
alldata <- data.frame(cbind(y,X))
## simulating "y"
sigma <- 15.7
X <- as.matrix(X)
y <- X%*%betas.true+rnorm(N, mean=0, sd=sigma)
## splitting into "train" and "test" data
alldata <- data.frame(cbind(y,X))
names(alldata)[1] <- "y"
head(alldata)
train <- alldata[1:100,]
test <- alldata[101:150,]
## splitting into "train" and "test" data
alldata <- data.frame(cbind(y,X))
names(alldata)[1] <- "y"
print(dim(alldata))
head(alldata)
train <- alldata[1:100,]
test <- alldata[101:150,]
N <- 150; P <- 50
X <- matrix(NA, nrow=N, ncol=P)
# covariance matrix
covmat <- matrix(rnorm(P^2,sd=2), nrow=P); covmat <- covmat+t(covmat)
U <- eigen(covmat)$vectors; D <- diag(rexp(P,rate=10))
covmat <- U%*%D%*%t(U)
library(mvtnorm)
for(i in 1:N){ X[i,] <- rmvnorm(1, mean=rep(0,P), sigma=covmat) }
X <- data.frame(X)
dim(X)
head(X)
X%*%betas.true
## true betas
# v11-v50 are not : 계수가 0에 가까움 => 마지막 10개의 계수들 0으로 설정
betas.true <- c(1,2,3,4,5,-1,-2,-3,-4,-5,rep(0,P-10))
betas.true
# v11-v50 are not : 계수가 0에 가까움 => 마지막 10개의 계수들 0으로 설정
X%*%betas.true
X <- as.matrix(X)
X%*%betas.true
library(glmnet)
?cv.glmnet
library(glmnet)
## fit ridge (trying 100 different lambda values == nlambda=100 )
## alpha=0 gives ridge regression
ridge <- glmnet(x=as.matrix(train[,-1]), y=as.numeric(train[,1]), alpha=0, nlambda=100)
plot(ridge, xvar="lambda", main="Ridge Regression Betas for Different Values of the Tuning Parameter")
cv.ridge <- cv.glmnet(x=as.matrix(train[,-1]), y=as.numeric(train[,1]), alpha=0, nfolds=10, nlambda=100)
## getting cvmspe from best value of lambda
cvmspe.ridge <- min(cv.ridge$cvm)
## get lambda and best ridge regresstion fit
lambda.ridge <- cv.ridge$lambda.min
lambda.ridge
## some plots
par(mfrow=c(1,2))
plot(cv.ridge)
abline(v=log(lambda.ridge))
cv.ridge <- cv.glmnet(x=as.matrix(train[,-1]), y=as.numeric(train[,1]), alpha=0, nfolds=10, nlambda=100)
## getting cvmspe from best value of lambda
cvmspe.ridge <- min(cv.ridge$cvm)
## get lambda and best ridge regresstion fit
lambda.ridge <- cv.ridge$lambda.min
lambda.ridge
## some plots
par(mfrow=c(1,2))
plot(cv.ridge)
abline(v=log(lambda.ridge))
plot(ridge, xvar="lambda", main="Ridge Regression Betas for Different Values of the Tuning Parameter")
abline(v=log(lambda.ridge))
cv.ridge <- cv.glmnet(x=as.matrix(train[,-1]), y=as.numeric(train[,1]), alpha=0, nfolds=10, nlambda=100)
## getting cvmspe from best value of lambda
cvmspe.ridge <- min(cv.ridge$cvm)
## get lambda and best ridge regresstion fit
lambda.ridge <- cv.ridge$lambda.min
lambda.ridge
## some plots
plot(cv.ridge)
abline(v=log(lambda.ridge))
plot(ridge, xvar="lambda", main="Ridge Regression Betas for Different Values of the Tuning Parameter")
abline(v=log(lambda.ridge))
## some plots
plot(cv.ridge)
abline(v=log(lambda.ridge))
plot(cv.ridge)
abline(v=log(lambda.ridge))
cvmspe.ridge
lambda.ridge
lambda.min
cv.ridge$lambda.min
diag(50)
`2x2_pca` <- read.csv("C:/Users/MINJI/EDA/2x2_pca.csv", encoding="CP949")
View(`2x2_pca`)
pca <- read.csv("C:/Users/MINJI/EDA/pca.csv", header=FALSE)
View(pca)
![text](/database/db_schema_res.png)
![text](/database/db_schema_res.png)
```{r}
pwd
크게 분석용 테이블과 배포용 테이블로 나누어 데이터를 저장하였다.
setwd("C:/Users/MINJI/MJ/2019-2/Data_Engineering/Seoul_Festival")
![](data/database/db_schema_res.png)
